/*
Nathaniel Neubert, Caleb Pomar, nathanielneubert@gmail.com, cpsharksfan@gmail.com 
This is a program that simulates a hotplate with heaters of 100 degrees on the top and
bottom. It outputs an excel file which can be used to create a graphical representaion.
The program may also accept a pre-existing hotplate temperature table and determine the
future temperature within a set number of iterations. The size of the Hotplate is set
at 10 by 10.

This program was made using proper pair programming in Visual Studios.

We successfully created such a graphical representation in excel with the output file created
by our program.

Test Case 1 
We hand calculated all the values for the hotplate after one and two iterations and
stored the values in an excel spreadsheet. Below the results can be seen.

After first iteration
0.0000	100.0000	100.0000	100.0000	100.0000	100.0000	100.0000	100.0000	100.0000	0.0000
0.0000	25.0000	25.0000	25.0000	25.0000	25.0000	25.0000	25.0000	25.0000	0.0000
0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000
0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000
0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000
0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000
0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000
0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000
0.0000	25.0000	25.0000	25.0000	25.0000	25.0000	25.0000	25.0000	25.0000	0.0000
0.0000	100.0000	100.0000	100.0000	100.0000	100.0000	100.0000	100.0000	100.0000	0.0000

After Second iteration
0.0000	100.0000	100.0000	100.0000	100.0000	100.0000	100.0000	100.0000	100.0000	0.0000
0.0000	31.2500	37.5000	37.5000	37.5000	37.5000	37.5000	37.5000	31.2500	0.0000
0.0000	6.2500	6.2500	6.2500	6.2500	6.2500	6.2500	6.2500	6.2500	0.0000
0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000
0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000
0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000
0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000	0.0000
0.0000	6.2500	6.2500	6.2500	6.2500	6.2500	6.2500	6.2500	6.2500	0.0000
0.0000	31.2500	37.5000	37.5000	37.5000	37.5000	37.5000	37.5000	31.2500	0.0000
0.0000	100.0000	100.0000	100.0000	100.0000	100.0000	100.0000	100.0000	100.0000	0.0000
Result: Passed
*/

#include <iostream>
#include <iomanip>
#include <fstream>
using namespace std;

int main() {

	const int SIDE_LENGTH = 10;
	const int MIN_INDEX = 0;
	const int MAX_INDEX = SIDE_LENGTH - 1;
	const int NUM_NEIGHBORS = 4;
	const int DESIRED_ITERATIONS = 3;

	const double HOT_TEMP = 100.0000;
	const double COLD_TEMP = 0.0000;
	const double STABLE_CHANGE = 0.1;

	double oldTemps[SIDE_LENGTH][SIDE_LENGTH];
	double newTemps[SIDE_LENGTH][SIDE_LENGTH];
	double maxTempChange = 0.0;
	double currentTempChange = 0.0;

	const int NEIGHBOR_ADJUST = 1;
	const int HEAT_PRECISION = 4;
	const int HEAT_WIDTH = 10;

	ifstream inputPlate;
	ofstream outputPlate;
	string oFileName = "Hotplate.csv";
	string iFileName = "Inputplate.txt";


	cout << "Hotplate simulator" << endl << endl;
	cout << "Printing initial plate..." << endl;

	for (int i = 0; i < SIDE_LENGTH; ++i) {
		for (int j = 0; j < SIDE_LENGTH; ++j) {
			if ((i == MIN_INDEX || i == MAX_INDEX) && (j > MIN_INDEX && j < MAX_INDEX)) {
				oldTemps[i][j] = HOT_TEMP;
			}
			else {
				oldTemps[i][j] = COLD_TEMP;
			}
		}
	}

	for (int i = 0; i < SIDE_LENGTH; ++i) {
		for (int j = 0; j < SIDE_LENGTH; ++j) {
			cout << fixed << setprecision(HEAT_PRECISION) << setw(HEAT_WIDTH) << oldTemps[i][j];
			if (j < MAX_INDEX) {
				cout << ",";
			}
		}
		cout << endl;
	}

	cout << endl;
	cout << "Printing Plate after one iteration..." << endl;

	for (int i = 1; i < MAX_INDEX; ++i) {
		for (int j = 1; j < MAX_INDEX; ++j) {
			newTemps[i][j] = (oldTemps[i - NEIGHBOR_ADJUST][j] + oldTemps[i + NEIGHBOR_ADJUST][j] +
				oldTemps[i][j + NEIGHBOR_ADJUST] + oldTemps[i][j - NEIGHBOR_ADJUST]) / NUM_NEIGHBORS;
		}
	}
	for (int i = 1; i < MAX_INDEX; ++i) {
		for (int j = 1; j < MAX_INDEX; ++j) {
			oldTemps[i][j] = newTemps[i][j];
		}
	}

	for (int i = 0; i < SIDE_LENGTH; ++i) {
		for (int j = 0; j < SIDE_LENGTH; ++j) {
			cout << fixed << setprecision(HEAT_PRECISION) << setw(HEAT_WIDTH) << oldTemps[i][j];
			if (j < MAX_INDEX) {
				cout << ",";
			}
		}
		cout << endl;
	}

	do {
		maxTempChange = 0;
		for (int i = 1; i < MAX_INDEX; ++i) {
			for (int j = 1; j < MAX_INDEX; ++j) {
				newTemps[i][j] = (oldTemps[i - NEIGHBOR_ADJUST][j] + oldTemps[i + NEIGHBOR_ADJUST][j] +
					oldTemps[i][j + NEIGHBOR_ADJUST] + oldTemps[i][j - NEIGHBOR_ADJUST]) / NUM_NEIGHBORS;
				currentTempChange = newTemps[i][j] - oldTemps[i][j];
				if (currentTempChange > maxTempChange) {
					maxTempChange = currentTempChange;
				}
			}
		}
		for (int i = 1; i < MAX_INDEX; ++i) {
			for (int j = 1; j < MAX_INDEX; ++j) {
				oldTemps[i][j] = newTemps[i][j];
			}
		}
	} while (maxTempChange > STABLE_CHANGE);

	cout << endl;
	cout << "Printing final plate..." << endl;

	outputPlate.open(oFileName);
	for (int i = 0; i < SIDE_LENGTH; ++i) {
		for (int j = 0; j < SIDE_LENGTH; ++j) {
			cout << fixed << setprecision(HEAT_PRECISION) << setw(HEAT_WIDTH) << oldTemps[i][j];
			outputPlate << fixed << setprecision(HEAT_PRECISION) << setw(HEAT_WIDTH) << oldTemps[i][j];
			if (j < MAX_INDEX) {
				cout << ",";
				outputPlate << ",";
			}
		}
		cout << endl;
		outputPlate << endl;
	}
	outputPlate.close();

	cout << endl;
	cout << "Outputting final plate to file " << "\"" << "Hotplate.csv" << "\"" << endl << endl;

	inputPlate.open(iFileName);
	if (!inputPlate.is_open()) {
		cout << "fail" << endl;
	}
	if (inputPlate.is_open()) {
		for (int i = 0; i < SIDE_LENGTH; ++i) {
			for (int j = 0; j < SIDE_LENGTH; ++j) {
				inputPlate >> oldTemps[i][j];
			}
		}
	}
	else {
		cout << "fail" << endl;
	}

	for (int k = 0; k < DESIRED_ITERATIONS; ++k) {
		for (int i = 1; i < MAX_INDEX; ++i) {
			for (int j = 1; j < MAX_INDEX; ++j) {
				newTemps[i][j] = (oldTemps[i - NEIGHBOR_ADJUST][j] + oldTemps[i + NEIGHBOR_ADJUST][j] +
					oldTemps[i][j + NEIGHBOR_ADJUST] + oldTemps[i][j - NEIGHBOR_ADJUST]) / NUM_NEIGHBORS;
			}
		}
		for (int i = 1; i < MAX_INDEX; ++i) {
			for (int j = 1; j < MAX_INDEX; ++j) {
				oldTemps[i][j] = newTemps[i][j];
			}
		}
	}

	cout << "Printing input plate after " << DESIRED_ITERATIONS << " updates..." << endl;
	for (int i = 0; i < SIDE_LENGTH; ++i) {
		for (int j = 0; j < SIDE_LENGTH; ++j) {
			cout << fixed << setprecision(HEAT_PRECISION) << setw(HEAT_WIDTH) << oldTemps[i][j];
			if (j < MAX_INDEX) {
				cout << ",";
			}
		}
		cout << endl;
	}

	system("pause");
	return 0;
}
